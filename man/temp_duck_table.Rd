% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/duckdb_temp.R
\name{temp_duck_table}
\alias{temp_duck_table}
\title{Create a Temporary DuckDB Table}
\usage{
temp_duck_table(.data, con, tbl_name, overwrite = FALSE, quiet = TRUE)
}
\arguments{
\item{.data}{A tibble or dataframe-like object that can be inserted into
DuckDB.}

\item{con}{A DuckDB connection.}

\item{tbl_name}{The name for the temporary table.}

\item{overwrite}{A logical whether to overwrite an existing temporary table.}

\item{quiet}{Suppress information messages. The default is true and this does
not stop any errors/warnings, only messages which inform the user on what
is happening.}
}
\value{
A lazy table from DuckDB and \code{\link[dplyr:tbl]{dplyr::tbl()}}, invisibly.
}
\description{
Creates a caching system using temporary tables in DuckDB. This checks if a
table exists and creates it as a temp table if it does not, or can
recalculate if it does.
}
\details{
This allows you to cache a calculation in DuckDB and retrieve it later
without inserting a check to calculate or to pull the existing. When
inserting, the table does not have to be materialized. You can cache the
result of a DuckDB query which uses \code{\link[dplyr:tbl]{dplyr::tbl()}}. Queries from any other
database must be materialized.

This is similar to the concept of \code{\link[duckplyr:compute.duckplyr_df]{duckplyr::compute.duckplyr_df}}, but is a
little more flexible for my needs (see
\href{https://github.com/tidyverse/duckplyr/issues/728}{tidyverse/duckplyr#728}).
}
