% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/duckdb_temp.R
\name{temp_duck_table}
\alias{temp_duck_table}
\title{Create a Temporary DuckDB Table}
\usage{
temp_duck_table(con, expr, tbl_name, overwrite = FALSE, quiet = TRUE)
}
\arguments{
\item{con}{A DuckDB connection.}

\item{expr}{A tibble or dataframe-like object that can be inserted into
DuckDB.}

\item{tbl_name}{The name for the temporary table.}

\item{overwrite}{A logical whether to overwrite an existing temporary table.}

\item{quiet}{Suppress information messages. The default is true and this does
not stop any errors/warnings, only messages which inform the user on what
is happening.}
}
\value{
A lazy table from DuckDB and \code{\link[dplyr:tbl]{dplyr::tbl()}}, invisibly.
}
\description{
Creates a caching system using temporary tables in DuckDB. This checks if a
table exists and creates it as a temp table if it does not, or can
recalculate if it does.
}
\details{
This allows you to cache a calculation in DuckDB and retrieve it later
without inserting a check to calculate or to pull the existing. When
inserting the table must be materialized. You can't cache the result of
\code{\link[dplyr:tbl]{dplyr::tbl()}} until you \code{\link[dplyr:compute]{dplyr::collect()}} it.

This function may change or go away if/when \code{{duckplyr}} becomes more
friendly.
}
